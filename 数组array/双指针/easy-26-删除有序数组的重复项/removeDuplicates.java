// 给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。
// 由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。
// 将最终结果插入 nums 的前 k 个位置后返回 k 。
// 不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

// 解题思路：
// 解法： 双指针
// 首先注意数组是有序的，那么重复的元素一定会相邻。
// 要求删除重复元素，实际上就是将不重复的元素移到数组的左侧。
// 考虑用 2 个指针，一个在前记作 p，一个在后记作 q，算法流程如下：
// 1.比较 p 和 q 位置的元素是否相等。
// 如果相等，q 后移 1 位
// 如果不相等，将 q 位置的元素复制到 p+1 位置上，p 后移一位，q 后移 1 位
// 重复上述过程，直到 q 等于数组长度。
// 返回 p + 1，即为新数组长度。 

class Solution {
    public int removeDuplicates(int[] nums) {
        // 判断数组不为空
        if(nums == null || nums.length == 0) return 0;

        // i为第一个指针，指向第一位, j为第二个指针，指向第二位
        int i = 0,j = 1;
        while ( j < nums.length ){
            if ( nums[i] == nums[j]) {
                // i和j值相等，则判断下一位
                j++;
            } else {
                // i，j下标不同时
                if ( i !=j ) {
                    // i和j的值不相等，设置i的下一位为不重复
                    nums[++i] = nums[j];
                }
            }
        }
        // 数组索引 + 1
        return i + 1 ;
    }
}

// 示例 1：

// 输入：nums = [1,1,2]
// 输出：2, nums = [1,2,_]
// 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
// 示例 2：

// 输入：nums = [0,0,1,1,1,2,2,3,3,4]
// 输出：5, nums = [0,1,2,3,4]
// 解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
